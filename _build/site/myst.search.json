{"version":"1","records":[{"hierarchy":{"lvl1":"About me"},"type":"lvl1","url":"/about-me","position":0},{"hierarchy":{"lvl1":"About me"},"content":"\n\nHello!\n\n","type":"content","url":"/about-me","position":1},{"hierarchy":{"lvl1":"Welcome to SideHub"},"type":"lvl1","url":"/intro","position":0},{"hierarchy":{"lvl1":"Welcome to SideHub"},"content":"...and to be really sure you need to have a doubt\n\nHello! Welcome to this thing. I’m not sure what this is, but I created it with the intent to collect all my “side projects”, publish them in a single place, and making them available in the internet.\n\nDriven by a implacable curiosity, I am obsessed with creating mathematical models to describe the world around me, explore ideas, or solve doubts that pop up in my head. The model must be rigorously ab initio, namely from first principles. My end goal is, whether possible, to obtain analytical solutions. Modelling is a challenge that necessitates perseverance, but at the same time it stimulates deep thinking and sharpen your problem solving skills. Carefully choosing the approximations is in itself a real form of art: it requires creativity and imagination, as well as the skill to visualize your system and what you want to narrate through the model.\n\nNothing of what I’ve done is new, quite the opposite: I am obsessed with withdrawing in my shell and not looking anywhere for hints or solutions, except when strictly necessary. It won’t be surprising that most of the things you will read here are surely already well-known, and many interpretations inaccurate at best. This blog is not meant to be an enciclopedia, rather a collection of my thoughts, ideas, and obsessions. If I ever catch the interest of even one person in the world, I’ll be more than happy.\n\nPlease feel free to contact me for any feedback, suggestions, or corrections!\n\nMarco## Content of SideHub","type":"content","url":"/intro","position":1},{"hierarchy":{"lvl1":"Physical modelling"},"type":"lvl1","url":"/intro-physics","position":0},{"hierarchy":{"lvl1":"Physical modelling"},"content":"","type":"content","url":"/intro-physics","position":1},{"hierarchy":{"lvl1":"Physical modelling","lvl2":"Modelling of Earth, Air and Sun"},"type":"lvl2","url":"/intro-physics#modelling-of-earth-air-and-sun","position":2},{"hierarchy":{"lvl1":"Physical modelling","lvl2":"Modelling of Earth, Air and Sun"},"content":"The atmospheric pressure: how does pressure and altitude are related?\n\nsun_position.md: where is the sun at a certain time and position on the Earth?\n\nUV_index.md: which is the UV index at a certain time and position on the Earth?\n\nplanet_orbits.md: what is the equation that describes the orbit of planes in the sky?","type":"content","url":"/intro-physics#modelling-of-earth-air-and-sun","position":3},{"hierarchy":{"lvl1":"Physical modelling","lvl2":"Mathematical tools"},"type":"lvl2","url":"/intro-physics#mathematical-tools","position":4},{"hierarchy":{"lvl1":"Physical modelling","lvl2":"Mathematical tools"},"content":"color​_from​_spectrum​.md: obtain the RBG color from an emission spectrum\n\nradiation.md: from Geiger counter data to radiation","type":"content","url":"/intro-physics#mathematical-tools","position":5},{"hierarchy":{"lvl1":"The atmospheric pressure"},"type":"lvl1","url":"/pressure-theoretical-model","position":0},{"hierarchy":{"lvl1":"The atmospheric pressure"},"content":"TODO:\n - rewrite dry approximations to have \"p\" instead and then have the dry approx for python\n - Rewrite \"pressure at sea level\" and redefine \\chi to also include gravity change and such\n   - I need to find f_w such that avg f_w = 0.4%. But considering that f_w(h)=0 for h>20km\n - Take care that I moved some sections\n - Rewrite almost everything to have it more fluid\n\nBeware!\n\nHere reported is an ab initio modelling project. I like to model things by myself, so there will be mistakes, errors, inaccuracies, and wrong interpretations. The reader is advised! My projects are the opposite of standing on the shoulders of giants. They are like trying to build my own giant, and he’s barely alive.\n\nThe information that I gathered from external sources is found inside the blue boxes. Everything outside the blue boxes is written and developed entirely by me.```{embed} #abinitio-warning\n```\n\nComment\n\nI did this project in Desmos back in 2021. For some reason, I’ve always been obsessed with air pressure, perhaps because I discovered that it can be measured outstandingly precisely with a smartphone. It can even detect altitude changes on the order of meters. So I asked myself: can I derive how the atmospheric pressure varies with altitude, and can I do it as accurately as possible? This way, I could estimate a change in altitude by measuring the change in pressure with my phone. And it works rather nicely!","type":"content","url":"/pressure-theoretical-model","position":1},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl2":"Introduction"},"type":"lvl2","url":"/pressure-theoretical-model#introduction","position":2},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl2":"Introduction"},"content":"The atmosphere is a mass of air that is gravitationally bound to a planet. On Earth, phenomena as solar irradiation, water evaporation, precipitations, turbulent convective motion, Coriolis force, photochemical reactions, and many more, all contribute to the formation of a chaotic and extremely complex system that makes the modelling of the atmosphere not a trivial task. While we will try to be as ab initio as possible, many of such factors cannot be easily modelled, and need to be implemented through the use empirical data. For example, to derive a mathematical expression for the atmospheric temperature at any given altitude is way too complex to be worth trying, and that is where measurements come to aid us.\n\nHere, we will try to model a fictitious atmosphere at equilibrium, where no net mass flux (wind) exists at any point of space. This simplification implies that our atmosphere is static and thus cannot simulate real world dynamics, nor predict the weather. Nonetheless, our model will prove to be extremely robust, at the cost of closing an eye and manually tune some of the empirical parameters.\n\nIn the following section we will develop the theoretical model of Earth’s atmosphere as accurately as we can be. Then, we will implement our final model in python and validate it by calculating known data, such as the total atmospheric mass. Finally, in the fourth section we will make use of measurements to more accurately model atmospheric conditions at any given time and position on Earth.","type":"content","url":"/pressure-theoretical-model#introduction","position":3},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl2":"Theoretical derivation"},"type":"lvl2","url":"/pressure-theoretical-model#theoretical-derivation","position":4},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl2":"Theoretical derivation"},"content":"","type":"content","url":"/pressure-theoretical-model#theoretical-derivation","position":5},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Atmospheric pressure at equilibrium","lvl2":"Theoretical derivation"},"type":"lvl3","url":"/pressure-theoretical-model#heading-barometric-formula","position":6},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Atmospheric pressure at equilibrium","lvl2":"Theoretical derivation"},"content":"We start from considering an ideal gas. This approximation works well with the Earth’s atmosphere, because it has a sufficiently low density and high temperature. From the ideal gas law, the pressure is given by:p=nk_BT\n\nwhere n the numerical density of the gas, and T its temperature. To model Earth’s atmosphere, we imagine an infinitely high column of gas subjected to Earth’s gravitational field. For now, we assume that Earth is spherically symmetric. We also assume that the mass of the atmosphere is negligible, so that there is no self-interaction, which would make the problem not analytically solvable. The pressure of the gas at a certain altitude h must be equivalent to the pressure exerted by the column of gas above it, due to the gravitational field, i.e.:nk_BT(h) = p(h)=\\dfrac{F(h)}{A}\n\nwith F the weight of the gas column above h. The pressure of the column can also be calculated as the integral along the vertical direction z of the mass density \\rho(z) of the gas, times the gravitational acceleration g(z):p(h) = \\int_h^{+\\infty}g(z)\\rho(z) dz  = \\int_h^{+\\infty}g(z)m_0(z)n(z) dz\n\nwhere we expressed the mass density ρ as the product of the average mass of the gas particle, m_0, and the numerical density, n. We can rearrange and convert the equation in its differential form, knowing that n(+\\infty)=0:\\dfrac{d}{dh}p(h)=-g(h)\\,m_0(h)n(h) = -g(h)\\,m_0(h)\\dfrac{p(h)}{k_BT(h)}\n\nWhere we used equation \n\n(1) to express the numerical density in terms of density and temperature. Note that equation \n\n(4) only depends on the altitude h and its proximity (the derivative), and not on the whole gas column that sits above. This mathematical step permits us to reach for a solution, but at the cost of not being able to find the absolute value of the pressure. Rearranging equation \n\n(4), we have:\\dfrac{\\dfrac{d}{dh}p(h)}{p(h)}=-\\dfrac{1}{k_B}\\dfrac{g(h)m_0(h)}{T(h)}\n\nBy integrating in dz from 0 to h we eventually obtain the general solution of how the pressure varies with the altitude:p(h)=p(0)\\exp\\bigg[-\\dfrac{1}{k_B}\\int_0^h\\dfrac{g(z)m_0(z)}{T(z)}dz\\bigg]\n\nInterestingly, to compute the pressure at a certain altitude h we just need to know how the integrand varies below that point, and not above. This is because the formula assumes we know p(0), the pressure at h=0, so that the information of the air column above is implicitly contained there. If we choose h=0 to be the sea level, then p(0) is the barometric pressure, which in standard conditions is 1013.25\\ \\mathrm{hPa}. In reality, the sea-level pressure varies continuously and it must be measured. We will understand how temperature and average mass vary with altitude in the following section. For now, let’s find the simplest solution by assuming that are all variables inside the integral, i.e. composition, temperature, and gravity, are constants. Such approximation is valid close to the Earth’s surface level. We then obtain:p_{bar}(h)=p(0)\\exp\\bigg[-\\dfrac{m_0g_0h}{k_BT}\\bigg]\n\nWe recognize m_0g_0h as the potential energy of a single gas particle, and k_BT as its thermal energy. Wait, what? Equation \n\n(7) is called the barometric formula. The exponential term is the Boltzmann factor (e^{-E/k_BT}), which, in a canonical ensemble (NVT, our case), represents the probability of the system to be in a state with energy E. In our case, E is the potential energy of a mass in a uniform gravitational field, and the Boltzmann factor represents the probability of a particle to be at that altitude. Macroscopically, this becomes the actual pressure of the gas.\n\nFrom the formula we can infer how the pressure profile changes with different parameters. A smaller particle mass makes the gas less attracted to the surface, and thus more spread toward higher altitudes. The same effect is achieved with higher temperatures, because of the higher kinetic energy of the molecules. Vice-versa, larger masses and lower temperatures make the gas more “compressed” at the surface.","type":"content","url":"/pressure-theoretical-model#heading-barometric-formula","position":7},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Empirical interlude: Earth’s atmosphere","lvl2":"Theoretical derivation"},"type":"lvl3","url":"/pressure-theoretical-model#empirical-interlude-earths-atmosphere","position":8},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Empirical interlude: Earth’s atmosphere","lvl2":"Theoretical derivation"},"content":"Reference atmospheric models\n\nThe International Standard Atmosphere (ISA) is a model that describes how the atmospheric parameters change with altitude. It assumes a constant gravitational field, dry air, and it divides the atmosphere in various layers, with different characteristics.","type":"content","url":"/pressure-theoretical-model#empirical-interlude-earths-atmosphere","position":9},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Geopotential altitude","lvl3":"Empirical interlude: Earth’s atmosphere","lvl2":"Theoretical derivation"},"type":"lvl4","url":"/pressure-theoretical-model#geopotential-altitude","position":10},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Geopotential altitude","lvl3":"Empirical interlude: Earth’s atmosphere","lvl2":"Theoretical derivation"},"content":"The vertical distance from the Earth’s mean sea level (MSL) is called the geometric altitude. In aviation and meteorology, the geopotential altitude is used instead, and it is defined as:\n\nGeopotential altitude\n\nThe vertical coordinate referenced to Earth’s MSL that represents the work performed when lifting one unit of mass over one unit of length through a hypothetical space in which the acceleration of gravity is assumed to be constant.\n\nAs you may know, Earth’s gravitational field changes not only with altitude but also with the latitude and, to a minor extent, longitude. The geopotential altitude arises when assuming a constant gravitational field with g_0=9.80665\\ \\mathrm{m/s^2}, the standard gravity at MSL, and it is related to potential energy, E=mg_0h. Specifically, a geopotential difference of 1\\ \\mathrm{m} corresponds to a potential energy difference of 9.80665\\ \\mathrm{J}. For example, on the North Pole, where g_{np}>g_0, a geometric height of 1\\ \\mathrm{m} corresponds to a geopotential altitude that is larger than one meter:mg_0h_{geop} = mg_{np}h_{geom} \\implies h_{geop} = \\dfrac{g_{np}}{g_{0}}h_{geom} > h_{geom}\n\nMore rigorously, denoting Earth’s radius with R, the geopotential height h is related to the geometric height z according to the formula:h = \\dfrac{R}{R+z}\\,z\n\nThe geopotential altitude is the one that we used in the section \n\nSection 2.1, where we assumed g constant. We will get rid of this approximation in a later section.","type":"content","url":"/pressure-theoretical-model#geopotential-altitude","position":11},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Temperature","lvl3":"Empirical interlude: Earth’s atmosphere","lvl2":"Theoretical derivation"},"type":"lvl4","url":"/pressure-theoretical-model#isa-temp","position":12},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Temperature","lvl3":"Empirical interlude: Earth’s atmosphere","lvl2":"Theoretical derivation"},"content":"The atmospheric temperature depends on many factors, such as irradiation from Earth’s surface, convection, chemical reactions, and interaction with high-energy photons from the Sun. The variation of temperature with altitude is called lapse rate, Γ:\\Gamma = -\\dfrac{dT}{dh}\n\nThe dry air approximation gives the dry adiabatic lapse rate (DALR. \\Gamma_d):\\Gamma_d = \\dfrac{g_0}{c_p} = 9.8\\ ^\\circ\\mathrm{C/km}\n\nwhich is valid only at the vicinity of Earth’s surface. The ISA provides a set of empirical lapse rates for each atmospheric layer.\n\nTable 1:Atmospheric layer data provided by ISA.\n\nLayer\n\nh range (km)\n\nΓ (K/km)\n\nBase T (K)\n\nTroposphere\n\n0 - 11\n\n+6.5\n\n288.15\n\nTropopause\n\n11 - 20\n\n0.0\n\n216.65\n\nStratosphere\n\n20 - 32\n\n-1.0\n\n216.65\n\nStratosphere\n\n32 - 47\n\n-2.8\n\n228.65\n\nStratopause\n\n47 - 51\n\n0.0\n\n270.65\n\nMesosphere\n\n51 - 71\n\n+2.8\n\n270.65\n\nMesosphere\n\n71 - 84.852\n\n+2.0\n\n214.65\n\nMesopause\n\n84.852 -\n\n0.0\n\n186.946\n\nThere are other layers above, but can be ignored for now since the atmosphere is extremely rarefied there. The ranges are given in geopotential altitude.","type":"content","url":"/pressure-theoretical-model#isa-temp","position":13},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Chemical composition","lvl3":"Empirical interlude: Earth’s atmosphere","lvl2":"Theoretical derivation"},"type":"lvl4","url":"/pressure-theoretical-model#subheading-chemical-composition","position":14},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Chemical composition","lvl3":"Empirical interlude: Earth’s atmosphere","lvl2":"Theoretical derivation"},"content":"The composition of dry atmosphere is kindly provided by \n\nNOAA. Unfortunately, the molar fractions they provide sum to a number greater than one, due to round-off and experimental errors (see \n\nwikipedia reports). While I was looking for more accurate values, I noticed an incongruence in the reported amount of \\mathrm{CO_2}. I quickly realized a shocking fact: the atmospheric concentration of \\mathrm{CO_2} is rising so quickly that most values are now outdated. For example, \n\nengineering toolbox uses a value of f_{CO_2}=0.033\\%, which is the fraction from circa 50 years ago (in the '70s). The value is now (2025) 0.042\\%, giving an outstanding 27% increase. This makes me wonder whether NOAA takes into account the change in fractional concentrations due to \\mathrm{CO_2} emissions and \\mathrm{O_2} depletion. A strong hint is that by substituting the present \\mathrm{CO_2} concentration with 0.033\\% in NOAA’s value, the sum magically becomes 1. For this reason, I took NOAA’s value and assumed that the 0.011\\% increase is due to combustion, and it substitutes \\mathrm{O_2} molecules\\begin{aligned}\nf_{CO_2}(2004) = 0.033\\% &\\longrightarrow f_{CO_2}(2025) = 0.042\\% \\\\\nf_{O_2}(2004) = 20.946\\% &\\longrightarrow f_{O_2}(2025) = 20.937\\%\n\\end{aligned}\n\nThis, however, results from the crude approximation that the additional carbon dioxide has been produced by a stoichiometric reaction between atmospheric oxygen and carbon, while all other species stay constant. In reality, \\mathrm{CO}_2 production is less “efficient”, because of the formation of water, among other compounds.\n\nTable 2:Chemical composition of Earth’s dry atmosphere, modified data from \n\nNOAA to sum to one. In the ideal gas approximation, molar fractions and volume fractions are equivalent.\n\nElement\n\nmolar fraction\n\nmolar mass (g/mol)\n\nN2\n\n78.084%\n\n28.0134\n\nO2\n\n20.937%\n\n31.998\n\nAr\n\n0.934%\n\n39.948\n\nCO2\n\n0.042%\n\n44.009\n\nNe\n\n18.182 ppm\n\n20.1797\n\nHe\n\n5.24 ppm\n\n4.0026\n\nCH4\n\n1.92 ppm\n\n16.043\n\nKr\n\n1.14 ppm\n\n83.798\n\nH2\n\n0.55 ppm\n\n2.016\n\nN2O\n\n0.33 ppm\n\n44.0124\n\nCO\n\n0.10 ppm\n\n28.010\n\nXe\n\n0.09 ppm\n\n131.293\n\nO3\n\n0.07 ppm\n\n47.997\n\nNO2\n\n0.02 ppm\n\n46.0047\n\nI2\n\n0.01 ppm\n\n126.90447\n\nother\n\ntraces\n\n-\n\ntotal\n\n100.000%\n\n28.9656\n\nWhich gives an average molar mass for dry air m_d = 28.9656\\ \\mathrm{g/mol}. The value is higher compared to 28.9647\\ \\mathrm{g/mol} encountered online, obtained from a lower level of atmospheric \\mathrm{CO_2} of 332 ppm. However, my calculation might be too rough, or blatantly wrong; I’m not too sure. See the \n\nScripps FAQ page for additional information.\n\nOf course, the atmosphere is never dry. Water vapor makes circa 0.25% of the atmospheric mass (i.e. 0.40% by volume) and its local concentration ranges within 0-4%. The molar fractions, including humidity, are simply given byf_{A}^{(hum)}=\\big(1-f_{H_2O}\\big)\\cdot f_{A}^{(dry)}\n\nwith A any species.\n\nQuick proof\n\nIn the dry case it holds\\sum_A f_{A}^{(dry)} = 1\n\nwhile for humid airf_{H_2O} + \\sum_A f_{A}^{(hum)} = 1\n\nWhen water vapor is added to the dry air, all f_{A}^{(dry)} must decrease by the same multiplying factor k:\\begin{aligned}\nf_{H_2O} + k\\sum_A f_{A}^{(dry)} &= 1 \\\\\nf_{H_2O} + k &= 1  \\\\\nk &= 1-f_{H_2O} \n\\end{aligned}\n\nwhich gives equation \n\n(13).\n\nAccording to the \n\nNRLMSIS empirical model, Earth’s atmospheric composition remains rather constant up to h\\approx 80\\ \\mathrm{km}. This is due to diffusion and turbulent convection, resulting in a well-mixing of the various gases. This is true up to a certain altitude","type":"content","url":"/pressure-theoretical-model#subheading-chemical-composition","position":15},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Lapse rates","lvl2":"Theoretical derivation"},"type":"lvl3","url":"/pressure-theoretical-model#lapse-rates","position":16},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Lapse rates","lvl2":"Theoretical derivation"},"content":"Let’s start from the barometric formula \n\n(7) and remove approximations one by one to finally arrive at the general formula \n\n(6). First, we introduce the empirical lapse rates that we learned above. We thus leave only the temperature term in the integral:p_{dry}(h)=p(0)\\exp\\bigg[-\\dfrac{g_0m_d}{R}\\int_0^h\\dfrac{1}{T(z)}dz\\bigg]\n\nWhere we used the average molar mass of dry air m_d and the gas constant R instead of m_0 and k_B.\nNow the temperature can be written as the general expression:T(h)= T(h_{i}) - \\Gamma_i (h-h_{i})\n\nwith i the atmospheric layer in which h lies, and h_{i} the base altitude of the layer i. This however can be easily calculated with a simple code. Let’s import the packages.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.integrate import quad\n\ndefine the global variables that we’re going to use across this article\n\n    R = 8.31446  # Specific gas constant for dry air in J/(mol·K)\n    g0 = 9.80665  # Standard gravity in m/s^2\n    m_dry = 28.9656e-3  # Molar mass of air in kg/mol\n    m_water = 18.01528e-3  # Molar mass of water in kg/mol\n    T0 = 288.15  # MSL standard temperature in Kelvin\n    p0 = 101325  # MSL standard atmospheric pressure in Pa\n\nand define a function that returns the temperature at a certain altitude, using equation \n\n(18) for each layer.\n\ndef ISA_temperature(h):\n    # Define base altitudes and temperatures for each layer\n    base_altitudes = [0, 11, 20, 32, 47, 51, 71, 84.852]\n    lapse_rates = [6.5, 0.0, -1.0, -2.8, 0.0, 2.8, 2.0, 0.0]\n\n    temperature = T0\n\n    # Find the layer corresponding to the altitude\n    for i in range(len(base_altitudes) - 1):\n        if h <= base_altitudes[i+1]:\n            return temperature - lapse_rates[i] * (h - base_altitudes[i])\n        else:\n            temperature = temperature - lapse_rates[i] * (base_altitudes[i+1]-base_altitudes[i])\n\n    # If altitude is above the highest defined layer\n    return temperature\n\n# Generate altitudes from 0 to 85 km and calculate temperature\naltitudes = np.linspace(0, 85, 100)\ntemperatures = [ISA_temperature(alt) for alt in altitudes]\n\nplt.rcParams.update({'font.size': 9})\nplt.figure(figsize=(7, 3))\nplt.plot(altitudes, temperatures, color=\"darkred\",lw=2)\nplt.xlabel(\"Altitude (m)\")\nplt.ylabel(\"Temperature (K)\")\nplt.grid(True)\nplt.show()\n\nWe can define a function that calculates the pressure in dry air, and compare it with the barometric approximation.\n\ndef pressure_barometric(h):\n    pressure = p0 * np.exp(-m_dry * g0 * h / (R * T0))\n\n    return pressure\n\ndef pressure_dry(h):\n    integral, err = quad(lambda h: 1 / ISA_temperature(h), 0, h, limit=100, points=[0, 11, 20, 32, 47, 51, 71, 84.852])\n    pressure = p0 * np.exp(-m_dry * g0 / R * 1000 * integral )\n\n    return pressure\n\naltitudes = np.linspace(0, 85, 500)     # altitude array in km\npressure_dry_arr = np.array([pressure_dry(alt)/100 for alt in altitudes])   # divided by 100 to return hPa\npressure_barom_arr = np.array([pressure_barometric(alt)/100 for alt in altitudes])\nplt.rcParams.update({'font.size': 10})\nfig, ax1 = plt.subplots(figsize=(7, 3))\nax2 = ax1.twinx()\nax1.plot(altitudes, pressure_dry_arr, color='darkred',lw=2,label='with Γ ($p_{dry}$)')\nax1.plot(altitudes, pressure_barom_arr, color='c',lw=2, label='barometric approx. ($p_{bar}$)')\nax2.plot(altitudes, pressure_barom_arr - pressure_dry_arr,linestyle='dashed', color='r', lw=2, label=r'$p_{bar}-p_{dry}$')\nax1.set_xlabel(\"Altitude (km)\")\nax1.set_ylabel(\"Pressure (hPa)\")\nax2.set_ylabel(\"Pressure difference (hPa)\")\nax1.set_xlim(0,60)\nax1.legend()\nax2.legend(loc=7)\nplt.show()\n\nOur current model already results in a very good estimation of the pressure, especially close to the surface. As a recap, our model has so far been built within the following approximations:\n\nZero net air flux\n\nIdeal gas law\n\nSpherical Earth, no spin\n\nConstant gravitational field\n\nConstant atmospheric composition, dry air\n\nEmpirical lapse rates\n\nLet’s keep improving our model by removing most of them one by one. The most impactful one is arguably dry air: on Earth, air is never completely dry, but some water vapor is mixed with the other gases. In practice, addition of water vapor affects the composition, namely the molar mass m in our model.\n\nSea-level pressure reduction\n\nAtmospheric pressure is always reported at the MSL. When a weather station at a certain altitude measures the local pressure, that value is then reduced to the sea level. In other words, the station must estimate the pressure that would be measured if someone digged down to the sea level. This is called sea-level pressure reduction, and since no air exists below ground, it is purely hypothetical, so that many assumptions need to be made. For example, how temperature and humidity would vary going down cannot be properly defined.\n\nThe sea-level pressure reduction is carried out by means of the \n\nhypsometric equation:p_{MSL} = p_{obs}\\cdot \\exp\\bigg[\\frac{m_mg_0h}{R\\overline{T}}\\bigg]\n\nwhere h is the altitude in which the pressure p_{obs} is measured, p_{MSL} is the pressure at the MSL, and \\overline{T} is the mean temperature of the (moist) air with molar mass m_m (I omitted to explain the \n\nvirtual temperature, but the formula is equivalent). The hypsometric equation is basically the barometric formula (equation \n\n(7)), but with an average temperature across the vertical distance. The average temperature can simply be computed using the standard lapse rate Γ, and a 12-hour average surface temperature, an attempt to exclude the effect of the irradiation of surface of the Earth:\\overline{T} \\approx \\dfrac{T_{obs}(t) + T_{obs}(t-12h)}{2} - \\Gamma \\cdot \\dfrac{h}{2}\n\nAdditional refinements can be employed, but they are often empirical and specific to the station site. Mind that this pressure reduction is fictitious, and it is better to be consistent (across the world) rather than accurate. And I don’t like this.","type":"content","url":"/pressure-theoretical-model#lapse-rates","position":17},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Humidity","lvl2":"Theoretical derivation"},"type":"lvl3","url":"/pressure-theoretical-model#humidity","position":18},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Humidity","lvl2":"Theoretical derivation"},"content":"The amount of water vapor in the air is usually measured in relative humidity (RH or ϕ), which is the fraction of the water vapor in the air relative to the “maximum” potential at that temperature.","type":"content","url":"/pressure-theoretical-model#humidity","position":19},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"From relative humidity","lvl3":"Humidity","lvl2":"Theoretical derivation"},"type":"lvl4","url":"/pressure-theoretical-model#from-relative-humidity","position":20},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"From relative humidity","lvl3":"Humidity","lvl2":"Theoretical derivation"},"content":"Relative humidity and water vapor pressure\n\nRelative humidity ϕ is defined as the ratio between the measured partial pressure of water p_w and its equilibrium (saturation) vapor pressure p_{vap,w}:\\varphi = \\dfrac{p_w}{p_{vap,w}}\n\nNote that these terms assume a different meaning in physics and in meteorology. In physics, the vapor pressure of a substance is the partial pressure of the gas phase in equilibrium with the liquid phase. In meteorology, however, vapor pressure refers to the measured partial pressure of water vapor, even when not in equilibrium, whereas the saturation vapor pressure is the actual vapor pressure of water, i.e., in equilibrium conditions. This nomenclature comes from the erroneous idea of air dissolving water vapor, eventually reaching a saturation limit. In reality, the vapor pressure of a substance only depends on the liquid-phase temperature, in first approximation. Here, we will try to use the correct physical definitions, albeit minding such incongruences.\n\nThe dependence of the vapor pressure of a substance on temperature can be estimated from the Clausius-Clapeyron equation knowing its boiling point T_b at standard pressure p^\\circ  (p^\\circ = 1 atm = 101325 Pa, and T_b = 99.97°C for water)p_{vap}(T) = p^\\circ \\cdot \\exp\\bigg[{-\\dfrac{\\Delta_{vap} H}{R}\\bigg(\\dfrac{1}{T}-\\dfrac{1}{T_b}\\bigg)}\\bigg]\n\nWith \\Delta_{vap} H the enthalpy of vaporization. However, this formula lacks of the desired accuracy, because of the numerous approximations that led to it: ideal gas, constant \\Delta_{vap} H with temperature, no volume change, etc. This is particularly true for water, which deviates from the ideality due to the strong intermolecular interactions it can establish. For this reason, it is common to use empirical formula. Here, we are going to use the \n\nTetens equationp_{vap,w}(T) = a \\exp\\bigg[\\dfrac{bT}{T+c}\\bigg]\n\nwith a=610.78,b=17.27,c=237.3 for p_{vap,w}: °C \\rightarrow Pa\n\ndef vapor_pressure(T):\n    # Tetens equation\n    a = 610.78\n    b = 17.27\n    c = 237.3  \n    p_vap = a * np.exp((b * (T - 273.15)) / (T - 273.15 + c))   \n    return p_vap\n\nT_array = np.linspace(0, 100, 100)  # Temperature range from 0 to 100 °C\nvapor_pressure_array = np.array([vapor_pressure(T+273.15)/100 for T in T_array])\np0_array = [p0/100 for T in T_array]\n\nplt.figure(figsize=(7, 3))\nplt.plot(T_array, vapor_pressure_array, color=\"darkblue\",lw=2,label=r'$p_{vap,w}$')\nplt.plot(T_array, p0_array,linestyle='dashed',color=\"k\",lw=2,label=r'$p\\!^\\circ$')\nplt.xlim(0,100)\nplt.xlabel(\"Temperature (°C)\")\nplt.ylabel(\"Pressure (hPa)\")\nplt.legend()\nplt.show()\n\nIn order to account for humidity in our model, we need to calculate f_{H_2O}, the molar fraction of water in the air, from the relative humidity. Given equation \n\n(21):f_{H_2O}(p,T) = \\dfrac{p_w}{p} = \\dfrac{\\varphi \\cdot p_{vap,w}(T)}{p}\n\nwith p the atmospheric pressure. The average mass of a mole of humid air m_{m} (subscript “m” from moist) now includes the molar mass of water m_w:\\begin{align}\nm_m(p,T) &= m_d\\big( 1 - f_{H_2O}(p,T) \\big) + m_w f_{H_2O}(p,T) \\\\[5pt]\n         &=  m_d  - (m_d - m_w) \\cdot f_{H_2O}(p,T)\n\\end{align}\n\nWater has a smaller mass compared to the other major species in the air, therefore humidity reduces the average molar mass of a parcel of air, making the atmospheric pressure smaller.\n\nNotice from \n\n(24) that the molar fraction of water, needed to compute the average molar mass of moist air m_m, depends on the atmospheric pressure itself. This causes a problem, since the pressure is our sought variable. We can get around this through a trick, that is using a “first-order” dry-air pressure profile p_{dry}(h) from the (equation \n\n(17)) instead of the real p_{moist}(h).\\begin{cases}\nf_{H_2O}(h) \\approx  \\varphi(h) \\cdot \\dfrac{p_{vap,w}(T(h))}{p_{dry}(h)} \\\\[15pt]\np_{vap,w}(T(h)) = 610.78\\cdot e^{17.27(T(h)+273.15)/(T(h)+35.85)} \\\\[10pt]\np_{dry}(h) = p(0)e^{-g_0m_d/R\\int_0^{h}dz/T(z)}\n\\end{cases}\n\nwhere we allowed the relative humidity to vary with altitude. Such approximation must not worry us, as the fraction of water vapor in the air never exceeds 5% and its effect on the atmospheric pressure is very small. I was actually surprised when I discovered this, and I thought that clouds were the real water carriers. Turns out not to be true. We will return on clouds soon. We can do a quick calculation to give ourself an estimate of the water content in the atmosphere. A MSL atmospheric pressure of 1008 hPa is often considered the threshold for a low-pressure area. Assuming that the change in pressure is only attributed to a change in water content, we can use equation \n\n(24) to roughly evaluate an average value of the water fraction, \\overline{f_{H_2O}}:\n\n1010 hPa: \\overline{f_{H_2O}} \\approx 0.85\\%\n\n1008 hPa: \\overline{f_{H_2O}} \\approx 1.37\\%\n\n1000 hPa: \\overline{f_{H_2O}} \\approx 3.46\\%\n\nThe lowest pressure ever recorded is 870 hPa, which gives an average water fraction of 38%, but our assumption is too crude for that case. Atmospheric pressure is also influenced by temperature and air circulation, which play a greater role in stormy weathers.\n\nLet’s built a function to compute f_{H_2O} depending on relative humidity and either temperature or altitude (from the barometric formula).\n\ndef water_molar_fraction(RH,T=None,h=None,p=p0):\n    if h is not None:\n        if h > 20:\n            return 0.0\n        T = ISA_temperature(h)\n        p_dry = pressure_dry(h)\n    \n    else:\n        p_dry = p\n\n    p_vap = vapor_pressure(T)\n\n    # partial pressure of water vapor\n    p_water = RH * p_vap\n\n    # molar fraction of water vapor\n    f_water = p_water / p_dry\n\n    return f_water\n\nAssuming a constant relative humidity with altitude, we can observe how the molar fraction of water in the air varies with temperature:\n\nRHs = [0.25, 0.50, 0.75, 1.0]\nf_water_RHs = [[water_molar_fraction(RH=RH,T=T+273.15)*100 for T in T_array] for RH in RHs]\nplt.figure(figsize=(7, 3))\ncmap = plt.get_cmap('coolwarm')\ncolors = cmap(np.linspace(0, 1, len(RHs)))\nfor idx,RH in enumerate(RHs):\n    plt.plot(T_array, f_water_RHs[:][idx],lw=2,label=f'RH = {RH}',color=colors[len(RHs)-idx-1])\nplt.xlim(0,40)\nplt.ylim(0,8)\nplt.xlabel(\"Temperature (°C)\")\nplt.ylabel(\"Water vapor molar fraction (%)\")\nplt.legend()\nplt.show()\n\nand it makes sense that f_{H_2O} never exceeds 5% on Earth. Taking the temperatures from \n\nISA (15°C at the surface), we can see that the fraction of water decreases exponentially with altitude:\n\nf_water_RHs = [[water_molar_fraction(RH=RH,h=alt)*100 for alt in altitudes] for RH in RHs]\nplt.figure(figsize=(7, 3))\nfor idx,RH in enumerate(RHs):\n    plt.plot(altitudes, f_water_RHs[:][idx],lw=2,label=f'RH = {RH}',color=colors[len(RHs)-idx-1])\nplt.xlim(0,15)\nplt.xlabel(\"Altitude (km)\")\nplt.ylabel(\"Water vapor molar fraction (%)\")\nplt.legend()\nplt.show()\n\nWe can finally reach an expression for the atmospheric pressure with moist airp_{moist}(h)= p(0)\\exp\\bigg[-\\dfrac{g_0}{R}\\int_0^h\\dfrac{m_m(z)}{T(z)}dz\\bigg]\n\nNotice that m_m(h) can be split into a m_d term, and a term that depends on z (equation \n\n(25)). We can therefore split the integral into two terms, and we find back the expression for p_{dry}(h), equation \n\n(17):\\begin{align}\np_{moist}(h) &= p_{dry}(h)\\cdot\\exp\\bigg[\\dfrac{g_0}{R}(m_d - m_w)\\int_0^h \\dfrac{f_{H_2O}(z)}{T(z)}dz\\bigg] \\\\[10pt]\n             &\\approx p_{dry}(h) \\cdot \\exp\\bigg[\\dfrac{g_0}{R}(m_d - m_w)\\int_0^h \\varphi(z) \\dfrac{p_{vap,w}(z)}{p_{dry}(z)T(z)}dz\\bigg]\n\\end{align}\n\nSince (m_d - m_w) > 0, the exponential term in equation \n\n(28) is greater than one. Humidity thus seems to effectively increase the pressure, which is the opposite of what we would expect! This is indeed not true. The effect of a smaller air molar mass is twofold. First, it reduces the slope of the pressure vertical profile, because less mass “pushes down” the air column. Secondly, a lighter air column produces a smaller pressure at the surface, p(0). Here, we fixed p(0)\\equiv p^\\circ, so that we are violating the law of conservation of mass. We will return on this topic in the following section.","type":"content","url":"/pressure-theoretical-model#from-relative-humidity","position":21},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"From dew point","lvl3":"Humidity","lvl2":"Theoretical derivation"},"type":"lvl4","url":"/pressure-theoretical-model#from-dew-point","position":22},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"From dew point","lvl3":"Humidity","lvl2":"Theoretical derivation"},"content":"The data avaiable from \n\natmospheric soundings does not usually provide the relative humidity, but the dew point (\n\nFigure 1).\n\n\n\nFigure 1:Atmospheric sounding chart showing the temperature (red line) and the dew point (green line), among other parameters, measured at different altitudes.\n\nDew point\n\nThe \n\ndew point is the temperature the air needs to be cooled to at constant pressure in order to reach a relative humidity of 100%.\n\nThe vapor pressure of water is the partial pressure of water p_w in the air, and is given byp_w(T) = \\varphi\\cdot p_{vap,w}(T)\n\nMathematically speaking, the dew point is the temperature T_{dew} at which p_{vap,w}(T_{dew}) \\equiv p_w(T), i.e. the equilibrium (saturated) vapor pressure is equivalent to the observed partial pressure of water:\\begin{align}\np_{vap,w}(T_{dew}) &\\equiv \\varphi\\cdot p_{vap,w}(T)\\\\[10pt]\nA \\exp\\bigg[\\dfrac{bT_{dew}}{T_{dew}+c}\\bigg] &\\equiv \\varphi \\cdot A \\exp\\bigg[\\dfrac{bT}{T+c}\\bigg] \\\\[10pt]\n\\dfrac{bT_{dew}}{T_{dew}+c} &\\equiv \\ln(\\varphi) + \\dfrac{bT}{T+c}\n\\end{align}\n\nwhere we used Tetens equation \n\n(23). Solving for T_{dew} we obtain:\\begin{cases}\nT_{dew} =\\dfrac{c\\gamma(T,\\varphi)}{b-\\gamma(T,\\varphi)} \\\\[15pt]\n\\gamma(T,\\varphi) = \\dfrac{bT}{T+c}+\\ln\\left(\\varphi\\right)\n\\end{cases}\n\nThe relative humidity at a dry-bulb temperature T (as measured by a conventional thermometer) can be obtained from the dew point T_{dew} by (cfr. \n\n(30)):\\varphi(T,T_{dew}) = \\dfrac{p_{vap,w}(T_{dew})}{p_{vap,w}(T)}\n\nThus, the fraction of water vapor in the air (equation \n\n(26)) can be rewritten asf_{H_2O}(h) \\approx \\dfrac{p_{vap,w}(T_{dew}(h))}{p_{dry}(h)}","type":"content","url":"/pressure-theoretical-model#from-dew-point","position":23},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Clouds","lvl3":"Humidity","lvl2":"Theoretical derivation"},"type":"lvl4","url":"/pressure-theoretical-model#clouds","position":24},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Clouds","lvl3":"Humidity","lvl2":"Theoretical derivation"},"content":"Clouds are aerosols of liquid droplets or crystals, which are mainly water. They form when the relative humidity exceeds 100%, or, equivalently, when the (dry-bulb) temperature reaches the dew point. The amount of water in clouds is measured by the \n\nliquid water content (LWC), which depends on the type of the cloud. Contrary to what one might expect, only a tiny fraction of the cloud volume is occupied by liquid water. LWC ranges within 0.03-3.0 g/m3, i.e. grams of liquid water per cubic meter of air. Considering that 1 m3 of air at the limit of the troposhere, which is roughly the upper limit for clouds, weigths circa 364 grams:M(11 \\, \\mathrm{km}) = \\dfrac{m_d\\,p_{dry}(11\\, \\mathrm{km})\\cdot 1\\, \\mathrm{m}^3}{RT(11\\, \\mathrm{km})} \\approx 364 \\, \\mathrm{g}\n\nwe deduce that the weight of clouds can be safely ignored.","type":"content","url":"/pressure-theoretical-model#clouds","position":25},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Earth as a spinning spheroid","lvl2":"Theoretical derivation"},"type":"lvl3","url":"/pressure-theoretical-model#earth-as-a-spinning-spheroid","position":26},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Earth as a spinning spheroid","lvl2":"Theoretical derivation"},"content":"Let’s now further improve our model by considering Earth as a spheroid (or ellipsoid) that spins and generates a gravitational field. Our description will then depend not only on altitude h, but also on the geographic latitude φ (distinct from ϕ for relative humidity).","type":"content","url":"/pressure-theoretical-model#earth-as-a-spinning-spheroid","position":27},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Gravity with altitude","lvl3":"Earth as a spinning spheroid","lvl2":"Theoretical derivation"},"type":"lvl4","url":"/pressure-theoretical-model#gravity-with-altitude","position":28},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Gravity with altitude","lvl3":"Earth as a spinning spheroid","lvl2":"Theoretical derivation"},"content":"Our first step is to include the variation of gravity with altitude. According to Newton’s law of gravitation:g_0(h) = G\\dfrac{M}{(R+h)^2}\n\nWhere the subscript 0 refers to the spherical symmetry of Earth. The formula can be expanded in powers of h around the point h=0:g_0(h) = g_0\\sum_{n=0}^{\\infty} (-1)^{n}\\left(n+1\\right) \\dfrac{h^n}{R^n}= \\dfrac{g_0}{\\left(1+\\dfrac{h}{R}\\right)^2}\n\nwhere we used the power series. We call the term \\left(1+h/R\\right)^{-2} the altitude factor, which makes the gravitational acceleration decrease with h squared, as expected.","type":"content","url":"/pressure-theoretical-model#gravity-with-altitude","position":29},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Reference ellipsoid","lvl3":"Earth as a spinning spheroid","lvl2":"Theoretical derivation"},"type":"lvl4","url":"/pressure-theoretical-model#reference-ellipsoid","position":30},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Reference ellipsoid","lvl3":"Earth as a spinning spheroid","lvl2":"Theoretical derivation"},"content":"We now more accurately account for Earth’s shape. We will use the World Geodetic System 1984 (WGS 84), which is used by the GPS system and suggested by the \n\nInternational Civil Aviation Organization.\n\nWorld Geodetic System 1984\n\nWorld Geodetic System 1984 describes Earth as a reference ellipsoid with the following parameters\n\nTable 3:Earth’s parameters as defined by the WGS84 model.\n\nParameter\n\nSymbol\n\nValue\n\nequatorial semi-axis\n\na or R_e\n\n6378137.0 \\ \\mathrm{m}\n\npolar semi-axis\n\nb or R_p\n\n\\approx 6356752.314140 \\ \\mathrm{m}\n\ngravitational constant\n\nGM\n\n3.986004418\\cdot 10^{-14}\\ \\mathrm{m^3/s^2}\n\nangular velocity\n\nω\n\n72.92115\\cdot10^{-6}\\ \\mathrm{rad/s}\n\nFrom these parameters are derived:\n\neccentricity e = \\sqrt{1-b^2/a^2} \\approx 0.0818\n\nequatorial gravity g_e = 9.7803253359\\ \\mathrm{m/s}^2\n\npolar gravity g_p = 9.8321849378\\ \\mathrm{m/s}^2\n\nThe Ellipsoidal Gravity Formula (see \n\nTheoretical gravity#Somigliana equation) gives the gravitational acceleration depending on the latitude φ:g_{WGS84}(\\phi) = g_e  \\dfrac{1+k\\sin^2(\\phi)}{\\sqrt{1-e^2\\sin^2(\\phi)}}\n\nwith k a constantk = \\dfrac{R_pg_p-R_eg_e}{R_eg_e}\n\n\n\nFigure 2:Approximation of Earth’s shape by the WGS84.\n\nAs much as I would love to, modeling Earth’s gravitational field ab initio is not worth it. Not because the mathematical modeling is too complicated (albeit cumbersome), but because I suppose that WGS84 relies on empirical data, and it’s of course better than any model I could ever devise.\n\nWe now want to combine equation \n\n(37) with \n\n(36) to obtain a general expression for the gravitational acceleration for any φ and h. But first, we need to find how Earth’s radius varies with the latitude. The radius of the WGS84 ellipsoid with altitude is:R(\\phi) = \\dfrac{R_eR_p}{\\sqrt{\\left(R_p\\cos(\\phi)\\right)^2+\\left(R_e\\sin(\\phi)\\right)^2}}\n\nso that we can combine it with the altitude factor to achieve a general expression for the gravitational acceleration depending on both altitude and latitudeg(h,\\phi) = g_e  \\dfrac{1+k\\sin^2(\\phi)}{\\sqrt{1-e^2\\sin^2(\\phi)}}\\cdot  \\dfrac{1}{\\left(1+\\dfrac{h}{R(\\phi)}\\right)^2}\n\nNote that simply applying the altitude factor is an approximate solution since, in an ellipsoid, the center of gravity is not intersected by the normal of the surface, except at the poles and at the equator (\n\nFigure 3). Moreover, the altitude factor does not take into account the increase in centrifugal force with altitude. We can consider such correction negligible.\n\n\n\nFigure 3:Representation of an ellipsoid and the \n\nvertical deflection.\n\nA python function that returns g(h,\\phi) may be:\n\ndef g_WGS84_altitude(h,latitude):\n    # WGS84 model for gravity times the altitude factor. Latitude in degrees, altitude in km\n    a = 6378137.0\n    b = 6356752.314140 \n    g_e = 9.7803253359\n    g_p = 9.8321849378\n    e2 = 1 - (b**2 / a**2)\n    k = (b * g_p - a * g_e) / (a * g_e)\n    h = h * 1000.0 # Convert altitude to meters\n\n    latitude = latitude * np.pi / 180.0  # Convert latitude to radians\n\n    g_lat = g0 * (1 + k * np.sin(latitude)**2) / (1 - e2 * np.sin(latitude)**2)**0.5\n    R_lat = a*b / (a * np.sin(latitude)**2 + b * np.cos(latitude)**2)\n    g = g_lat / ( 1 + (h / R_lat) )**2\n    return g\n\naltitudes = np.linspace(0, 800, 100)\nfig, ax = plt.subplots(figsize=(7, 3))\ngravity_eq = [g_WGS84_altitude(alt,0) for alt in altitudes]\ngravity_pol = [g_WGS84_altitude(alt,90) for alt in altitudes]\nax.plot(altitudes, gravity_eq,lw=2,color='darkred',label='Equator')\nax.plot(altitudes, gravity_pol,lw=2,color='lightblue',label='Pole')\nax.set_xlabel(\"Altitude (km)\")\nax.set_ylabel(\"Gravity (m/s²)\")\nax.set_xlim(0)\nax.legend()\nplt.show()\n\n","type":"content","url":"/pressure-theoretical-model#reference-ellipsoid","position":31},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"The thermosphere","lvl2":"Theoretical derivation"},"type":"lvl3","url":"/pressure-theoretical-model#the-thermosphere","position":32},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"The thermosphere","lvl2":"Theoretical derivation"},"content":"The thermosphere is the outer layer of the atmosphere, above 80 km of altitude. The name stems from the high temperatures that are reached due to the ionizing radiation from the sun.","type":"content","url":"/pressure-theoretical-model#the-thermosphere","position":33},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Temperature of the thermosphere","lvl3":"The thermosphere","lvl2":"Theoretical derivation"},"type":"lvl4","url":"/pressure-theoretical-model#temperature-of-the-thermosphere","position":34},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Temperature of the thermosphere","lvl3":"The thermosphere","lvl2":"Theoretical derivation"},"content":"The ISA model does not include the thermosphere, but reaches a maximum altitude of 86 km, where the temperature is 186.946 K. The data for the thermosphere is provided by the \n\nNRLMSIS empirical model. The temperature profile of the two models combined is shown in \n\nFigure 4, where I extended the constant temperature of the stratopause (186.946 K) up to 107.41 km, and used an exponential regression upward (see red line). The empirical fitting gives the function:T(h) =  -9799 e^{-0.0238x} + 947.23, \\quad 107.41\\,\\mathrm{km} \\le h \\le 1000 \\,\\mathrm{km}\n\n\n\nFigure 4:Temperature profile with altitude (black dots). The red line is the union between the ISA model (below 86 km), and my fitting. Data from the \n\nNRLMSIS empirical model at 2024-05-01 00:00 UTC over 0°N 50°E. Graph from my \n\nDesmos.\n\nWe can include the thermosphere in a new function that returns the temperature up to 1000 km above sea level, and extend the functions to calculate χ and p_{dry}. Let’s also add the possibility to change the surface temperature and the lapse rate, as long as it is positive (temperature decreases with altitude).\n\ndef ISA_temperature_1000km(h,T_surf=None,L0=None):\n    # Define base altitudes and temperatures for each layer\n    base_altitudes = [0, 11, 20, 32, 47, 51, 71, 84.852, 107.41] \n    lapse_rates = [6.5, 0.0, -1.0, -2.8, 0.0, 2.8, 2.0, 0.0]\n    base_temperatures = [288.15, 216.65, 216.65, 228.65, 270.65, 270.65, 214.65, 186.946]\n\n    if h > 1000 or h < 0:\n        raise TypeError(\"Altitude range is 0-1000 km\")\n    elif h >= base_altitudes[-1]:   # Thermosphere\n        return -9799 * np.exp(-0.0238 * h) + 947.23\n    elif h < base_altitudes[2]:     # If in troposphere, check for custom parameters\n        if T_surf is not None:\n            temperature = T_surf\n        else:    \n            temperature = base_temperatures[0]\n\n        if L0 is not None and L0 <= 0:\n            raise TypeError(\"Troposphere lapse rate must be positive and non-zero\")\n        elif L0 is not None:\n            lapse_rates[0] = L0\n\n        if T_surf is not None or L0 is not None:\n            if ( temperature - base_temperatures[1] ) / lapse_rates[0] > base_altitudes[2]:\n                raise TypeError(\"Surface temperature is too high or lapse rate is too small\")\n            \n            base_altitudes[1] = ( temperature - base_temperatures[1] ) / lapse_rates[0]\n\n\n    # Find the layer corresponding to the altitude\n    for i in range(len(base_altitudes) - 1):\n        if h <= base_altitudes[i+1]:\n            return temperature - lapse_rates[i] * (h - base_altitudes[i])\n        else:\n            temperature = base_temperatures[i+1]\n\n","type":"content","url":"/pressure-theoretical-model#temperature-of-the-thermosphere","position":35},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Composition in the thermosphere","lvl3":"The thermosphere","lvl2":"Theoretical derivation"},"type":"lvl4","url":"/pressure-theoretical-model#composition-in-the-thermosphere","position":36},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Composition in the thermosphere","lvl3":"The thermosphere","lvl2":"Theoretical derivation"},"content":"The value that we calculated in \n\nSection ?? refers to the global average of the atmospheric composition. We are now interested in how such composition changes with altitude. We know that turbulence and diffusion make the atmospheric composition constant up to 85 km (\n\nFigure 5). The vertical profile of carbon dioxide, one of the heaviest molecules in the air, starts decreasing from an altitude of 60 km (\n\nFigure 6).\n\n\n\nFigure 5:Atmospheric composition versus altitude\n\n\n\nFigure 6:Altitude profile of \\mathrm{CO}_2 molar fraction, in ppm. From \n\nBrown et al. (2024). Graph from my \n\nDesmos.\n\nSince the atmospheric pressure at 85 km is p_{dry}(85\\,\\mathrm{km})\\approx 0.5\\,\\mathrm{Pa}. We are therefore talking about minuscole changes, so that we are allowed to be rough. \n\nFigure 7 shows the vertical profile of the average molar mass of air, computed from the \n\nNRLMSIS empirical model data. A simple exponential regression from an altitude of 85 km can be made (blue dashed line). We can use the following expression for the average molar mass of dry air, in g/mol:m_d(h)=\\begin{cases}\n28.9656,\\quad h\\le 85\\,\\mathrm{km}\\\\\n28.9656\\cdot e^{-0.002(h-85\\,\\mathrm{km})}, \\quad h\\gt 85\\,\\mathrm{km}\n\\end{cases}\n\n\n\nFigure 7:Average molar mass of air (black dots) versus altitude. The blue dashed line is the (exponential) regression. Data from the \n\nNRLMSIS empirical model at 2024-05-01 00:00 UTC over 0°N 50°E.\n\ndef air_avg_molar_mass(h,RH):\n    #altitude in km\n    if h < 20:\n        f_water = water_molar_fraction(RH,h=h)\n        return (1 - f_water) * m_dry + f_water * m_water\n    elif h < 85:\n        return m_dry\n    else:\n        return m_dry * np.exp(-0.002*(h-85))\n\n","type":"content","url":"/pressure-theoretical-model#composition-in-the-thermosphere","position":37},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Pressure at sea level","lvl2":"Theoretical derivation"},"type":"lvl3","url":"/pressure-theoretical-model#pressure-at-sea-level","position":38},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Pressure at sea level","lvl2":"Theoretical derivation"},"content":"Until now, we blindly used the value of 1013.25 hPa as surface pressure. Such value is the average pressure at MSL which then includes the average molar fraction of water, \\overline{f_w}\\approx 0.40\\%. We thus need to consider that dry air would produce a larger pressure at sea level, and vice-versa, moist air with a total f_w > 0.40\\% produces a smaller surface pressure.\n\nWe can thus define the average air pressure  p_{avg}(h) as the vertical pressure profile with a total water vapor content of 0.40\\%.","type":"content","url":"/pressure-theoretical-model#pressure-at-sea-level","position":39},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Chi factor","lvl3":"Pressure at sea level","lvl2":"Theoretical derivation"},"type":"lvl4","url":"/pressure-theoretical-model#chi-factor","position":40},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Chi factor","lvl3":"Pressure at sea level","lvl2":"Theoretical derivation"},"content":"Pressure at MSL can be evaluated as total mass of the air column (cfr. equation \n\n(3)):p(0) = \\dfrac{F}{A} = \\int_{0}^{\\infty} n(z)m_{m}(z)g(z) dz = \\int_{0}^{\\infty} \\dfrac{p(z)m_{m}(z)g(z)}{RT(z)}dz\n\nWhich can be computed only if we already know the vertical profile of the pressure. We can of course use the dry-air approximation and estimate p_{moist}(0) by means of a multiplying factor \\chi_m, given by the ratio between the pressures exerted by the moist air column and the standard air (DEFINE STANDARD) column, i.e. p_{moist}(0) = \\chi_m \\, p_{std}(0):\\chi_m = \\dfrac{p_{moist}(0)}{p_{std}(0)} \\approx \\dfrac{\\int_{0}^{\\infty} \\frac{p_{dry}(z)m_{m}(z)g(z)}{T(z)}dz}{\\int_{0}^{\\infty} \\frac{p_{dry}(z)m_{sdt}(z)g(z)}{T(z)}dz}\n\nwhere we approximated the moist air pressure with the dry air pressure. By explicitating m_m(z) according to equation \n\n(24) we obtain\\chi_m \\approx 1 - \\dfrac{m_d-m_w}{m_d} \\dfrac{\\int_{0}^{\\infty} f_{H_2O}(z)\\frac{p_{dry}(z)}{T(z)}dz}{\\int_{0}^{\\infty} \\frac{p_{dry}(z)}{T(z)}dz}\n\nWith the ISA temperature profile and \\varphi = 1 up to 20 km I compute a value of 0.9983, namely an average water fraction of \\overline{f_{w}}\\approx 0.17\\%, and p_{moist}(0) \\approx 1011.5 \\ \\mathrm{hPa}.\n\nLet’s then build a function to calculate the factor χ and then include it in a function that evaluates the pressure with moist air.\n\ndef calc_chi(RH,maxh=84.852):\n    integral_frac, _ = quad(lambda z: water_molar_fraction(RH,h=z) * pressure_dry(z) / ISA_temperature(z), 0, maxh, limit=100, points=[0, 11, 20, 32, 47, 51, 71, 84.852])\n    integral_tot, _ = quad(lambda z: pressure_dry(z) / ISA_temperature(z), 0, maxh, limit=100, points=[0, 11, 20, 32, 47, 51, 71, 84.852])\n    \n    chi = 1 - ((m_dry - m_water) / m_dry) * (integral_frac / integral_tot)\n\n    return chi\n\ndef pressure_moist(h,RH,chi):\n    integral, _ = quad(lambda z: water_molar_fraction(RH,h=z) / ISA_temperature(z), 0, h, limit=100, points=[0, 11, 20, 32, 47, 51, 71, 84.852])\n    p_moist = chi * pressure_dry(h) * np.exp(g0 / R * (m_dry - m_water) * 1000 * integral)\n\n    return p_moist\n\nchi = calc_chi(RH)\npressure_moist_arr = np.array([pressure_moist(alt,1.0,chi)/100 for alt in altitudes])   # divided by 100 to return hPa\ndiff_moist_dry = pressure_moist_arr - pressure_dry_arr\nfig, ax1 = plt.subplots(figsize=(7, 3))\nax2 = ax1.twinx()\nax2.axhline(0,color='r',alpha=0.5,linestyle='dashed')\nax1.plot(altitudes, pressure_moist_arr,lw=2,label='$p_{moist}$ (RH=1)',color='b')\nax1.plot(altitudes, pressure_dry_arr,lw=2,label='$p_{dry}$',color='darkred',linestyle='dashed')\nax2.plot(altitudes, diff_moist_dry,lw=2,label=r'$p_{moist}-p_{dry}$',color='r',linestyle='dashed')\nplt.xlim(0,35)\nax1.set_xlabel(\"Altitude (km)\")\nax1.set_ylabel(\"Pressure (hPa)\")\nax2.set_ylabel(\"Pressure difference (hPa)\")\nax1.set_ylim(0)\nax1.legend(loc=(0.65,0.25))\nax2.legend(loc=(0.65,0.50))\nplt.show()\n\nWe can indeed see that the effect of water vapor is small, and the two pressure profiles very close to each other. To appreciate the deviation, also plotted is the relative difference, in red. The difference is in the order of 1 hPa (~ 0.1%). We are therefore very happy with the dry-air approximation that we made for the molar fraction of water, equation \n\n(26). The inclusion of the second-order term will provide negligible improvement over substantially higher computational costs.","type":"content","url":"/pressure-theoretical-model#chi-factor","position":41},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"The final model","lvl2":"Theoretical derivation"},"type":"lvl3","url":"/pressure-theoretical-model#the-final-model","position":42},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"The final model","lvl2":"Theoretical derivation"},"content":"We thus have built the best model we can concieve for atmospheric model. If we allow temperature and humidity as well to change with latitude, we can writep(h,\\phi)=p(0)\\exp\\bigg[-\\dfrac{1}{R}\\int_0^h\\dfrac{g(z,\\phi)m_m(z,\\phi)}{T(z,\\phi)}dz\\bigg]\n\nOur python function will then include the recently defined g_WGS84_altitude, air_avg_molar_mass, and ISA_temperature_1000km functions to evaluate the integral. We don’t need to include our recent enhancements of the model in the calculation of p_{dry}, since that is needed only to obtain f_{H_2O}.\n\ndef pressure_dry_1000km(h,T_surf=288.15,L0=6.5):  \n    H1 = ( T_surf - 216.65 ) / L0\n    if H1 > 11:\n        raise TypeError(\"Surface temperature is too high or lapse rate is too small\")\n    \n    integral, _ = quad(lambda h: air_avg_molar_mass(z,RH=0.0) / ISA_temperature_1000km(h,T_surf,L0), 0, h, limit=100, points=[0, H1, 20, 32, 47, 51, 71, 84.852, 107.41])\n    pressure = p0 * np.exp(-g0 / R * 1000 * integral)\n\n    return pressure\n\ndef water_molar_fraction_1000km(RH,h,T_surf=288.15,L0=6.5):\n    if h > 20 or RH == 0:\n        return 0.0\n    \n    H1 = ( T_surf - 216.65 ) / L0\n    if H1 > 11:\n        raise TypeError(\"Surface temperature is too high or lapse rate is too small\")\n\n    T = ISA_temperature_1000km(h,T_surf,L0)\n    p_dry = pressure_dry_1000km(h,T_surf,L0)\n    p_vap = vapor_pressure(T)\n    f_water = RH * p_vap / p_dry\n\n    return f_water\n\ndef calc_chi_1000km(RH,maxh=1000,T_surf=288.15,L0=6.5):\n    H1 = ( T_surf - 216.65 ) / L0\n    if H1 > 11:\n        raise TypeError(\"Surface temperature is too high or lapse rate is too small\")\n    \n    integral_frac, _ = quad(lambda z: water_molar_fraction_1000km(RH,z,T_surf,L0) * pressure_dry_1000km(z,T_surf,L0) / ISA_temperature_1000km(z,T_surf,L0), 0, 20, limit=100, points=[0, H1, 20])  #up to 20 km since above that the water fraction is 0 \n    integral_norm, _ = quad(lambda z: pressure_dry_1000km(z,T_surf,L0) / ISA_temperature_1000km(z,T_surf,L0), 0, maxh, limit=100, points=[0, H1, 20, 32, 47, 51, 71, 84.852, 107.41])\n    \n    chi = 1 - ((m_dry - m_water) / m_dry) * (integral_frac / integral_norm)\n\n    return chi\n\ndef pressure_moist_WGS84_1000km(h,lat,RH=0.0,chi=1.0,T_surf=288.15,L0=6.5):\n    H1 = ( T_surf - 216.65 ) / L0\n    integral, _ = quad(lambda z: g_WGS84_altitude(z,lat) * air_avg_molar_mass(z,RH) / ISA_temperature_1000km(z,T_surf,L0), 0, h, limit=100, points=[0, H1, 20, 32, 47, 51, 71, 84.852, 107.41])\n\n    p_moist = chi * p0 * np.exp(- 1000 * integral / R)\n\n    return p_moist\n\n","type":"content","url":"/pressure-theoretical-model#the-final-model","position":43},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl2":"Model validation"},"type":"lvl2","url":"/pressure-theoretical-model#model-validation","position":44},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl2":"Model validation"},"content":"","type":"content","url":"/pressure-theoretical-model#model-validation","position":45},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Total atmospheric mass","lvl2":"Model validation"},"type":"lvl4","url":"/pressure-theoretical-model#total-atmospheric-mass","position":46},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl4":"Total atmospheric mass","lvl2":"Model validation"},"content":"With our model, we can calculate the total mass of our atmosphere, assuming a MSL standard pressure of 1013.25 hPa. What we need to do is just integrate the density through the entire atmospheric spherical shell. The density \\rho_d of an ideal gas is given by\\rho = \\dfrac{mp}{RT}\n\nwith m the molar mass. We can then calculate the total atmospheric mass M_{atm} as\\begin{align}\n M_{atm} &= \\int_{0}^{2\\pi} \\int_{0}^{\\pi} \\int_{R(\\phi)}^{\\infty} \\rho(r,\\phi)\\, d\\theta\\, \\sin(\\phi) d\\phi\\, r^2 dr \\\\[15pt]\n &= \\int_{0}^{2\\pi} \\int_{0}^{\\pi} \\int_{R(\\phi)}^{\\infty} \\dfrac{m_m(r-R(\\phi),\\phi)\\,p(r-R(\\phi),\\phi)}{RT(r-R(\\phi))} d\\theta\\, \\sin(\\phi) d\\phi\\, r^2 dr \n\\end{align}\n\nThe radial integration should start from the Earth’s surface (R(\\phi)), and since our functions are defined with respect to the altitude h, we need to shift them by R(\\phi). We can then substitute the integrand r with h=r-R(\\phi), so that the integral in dh=dr will go from 0 to infinity. Moreover, we can integrate in d\\theta, as no functions depend on the longitude θ:\\begin{align}\n M_{atm} &= \\dfrac{2\\pi}{R} \\int_{0}^{\\pi} \\int_{0}^{\\infty} \\dfrac{m_m(h,\\phi)\\,p(h,\\phi)}{T(h,\\phi)}  \\sin(\\phi) d\\phi\\, \\left(h+R(\\phi)\\right)^2 dh \\\\[15pt]\n&= \\dfrac{2\\pi}{R} p(0) \\int_{0}^{\\pi} \\int_{0}^{\\infty} \\dfrac{m_m(h,\\phi)}{T(h,\\phi)}\\exp\\bigg[-\\dfrac{1}{R}\\int_0^{h} \\dfrac{g(z,\\phi)m_m(z,\\phi)}{T(z,\\phi)}dz\\bigg]  \\sin(\\phi) d\\phi\\, \\left(h+R(\\phi)\\right)^2 dh\n\\end{align}\n\nwhere we explicitated p(h,\\phi). To calculate M_{atm} thus requires to evaluate three integrals. It may make your laptop hot.","type":"content","url":"/pressure-theoretical-model#total-atmospheric-mass","position":47},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Altitude from pressure","lvl2":"Model validation"},"type":"lvl3","url":"/pressure-theoretical-model#altitude-from-pressure","position":48},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Altitude from pressure","lvl2":"Model validation"},"content":"Take equation T_from lapse and solve it with T = T(0)-Lz or T(h)-Lh-Lz and rearrange","type":"content","url":"/pressure-theoretical-model#altitude-from-pressure","position":49},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl2":"Empirical model"},"type":"lvl2","url":"/pressure-theoretical-model#empirical-model","position":50},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl2":"Empirical model"},"content":"","type":"content","url":"/pressure-theoretical-model#empirical-model","position":51},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"The NRLMSIS model","lvl2":"Empirical model"},"type":"lvl3","url":"/pressure-theoretical-model#the-nrlmsis-model","position":52},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"The NRLMSIS model","lvl2":"Empirical model"},"content":"The \n\nNRLMSIS empirical model provides an enormous quantity of data , that ...The model that we have built so far is actually rather accurate, especially if we want to use it at the surface of the Earth, where the atmospheric composition, the gravitational field, andWe can also substitute the lapse rate with the actual data from [atmospheric sounding](wiki:Atmospheric_sounding), if we want to calculate the change in pressure more accurately. For now, we are happy with the standard lapse rate.","type":"content","url":"/pressure-theoretical-model#the-nrlmsis-model","position":53},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Using sounding data","lvl2":"Empirical model"},"type":"lvl3","url":"/pressure-theoretical-model#using-sounding-data","position":54},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"Using sounding data","lvl2":"Empirical model"},"content":"","type":"content","url":"/pressure-theoretical-model#using-sounding-data","position":55},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"The tool","lvl2":"Empirical model"},"type":"lvl3","url":"/pressure-theoretical-model#the-tool","position":56},{"hierarchy":{"lvl1":"The atmospheric pressure","lvl3":"The tool","lvl2":"Empirical model"},"content":"","type":"content","url":"/pressure-theoretical-model#the-tool","position":57}]}